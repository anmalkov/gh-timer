#!/bin/bash
set -e

seconds=36000
is_stopwatch=false
is_big=false
while [ $# -gt 0 ]; do
  case "$1" in
  -s|--sec)
    seconds=$2
    ;;
  -m|--min)
    seconds=$(($2*60))
    ;;
  -w|--stopwatch)
    is_stopwatch=true
    ;;
  -b|--big)
    is_big=true
    ;;  
  -h|--help)
    echo "Run a timer or stopwatch.

gh timer [units] [number] [mode] [clock]

[units]
  -s, --sec : seconds 
  -m, --min : minutes

[mode]
  -w, --stopwatch : use a stopwatch mode, otherwise use a timer mode

[clock]
  -b, --big : show a big clock, otherwise show a small clock

Examples:

gh timer -s 30
    run timer for 30 seconds

gh timer -m 5 -b
    run timer for 5 minutes and show a big clock

gh timer -m 60 -w
    run stopwatch for 1 hour"
    exit 0
    ;;
  esac
  shift
done

clock_x=$(( ($(tput cols)/2)-(8*6/2) ))
clock_y=$(( ($(tput lines)/2)-3 ))

# $1 - Y, $2 - X, $3 - text
echo_pos() {
    echo -ne "\E[${1};${2}H""$3"
}

print_0 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "*   *"
    echo_pos $(( $clock_y + 2 )) $1 "*   *"
    echo_pos $(( $clock_y + 3 )) $1 "*   *"
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}
print_1 () {
    echo_pos $clock_y $1            "    *"
    echo_pos $(( $clock_y + 1 )) $1 "    *"
    echo_pos $(( $clock_y + 2 )) $1 "    *"
    echo_pos $(( $clock_y + 3 )) $1 "    *"
    echo_pos $(( $clock_y + 4 )) $1 "    *"
}

print_2 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "    *"
    echo_pos $(( $clock_y + 2 )) $1 "*****"
    echo_pos $(( $clock_y + 3 )) $1 "*    "
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}

print_3 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "    *"
    echo_pos $(( $clock_y + 2 )) $1 " ****"
    echo_pos $(( $clock_y + 3 )) $1 "    *"
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}

print_4 () {
    echo_pos $clock_y $1            "*   *"
    echo_pos $(( $clock_y + 1 )) $1 "*   *"
    echo_pos $(( $clock_y + 2 )) $1 "*****"
    echo_pos $(( $clock_y + 3 )) $1 "    *"
    echo_pos $(( $clock_y + 4 )) $1 "    *"
}

print_5 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "*    "
    echo_pos $(( $clock_y + 2 )) $1 "*****"
    echo_pos $(( $clock_y + 3 )) $1 "    *"
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}

print_6 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "*    "
    echo_pos $(( $clock_y + 2 )) $1 "*****"
    echo_pos $(( $clock_y + 3 )) $1 "*   *"
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}

print_7 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "    *"
    echo_pos $(( $clock_y + 2 )) $1 "    *"
    echo_pos $(( $clock_y + 3 )) $1 "    *"
    echo_pos $(( $clock_y + 4 )) $1 "    *"
}

print_8 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "*   *"
    echo_pos $(( $clock_y + 2 )) $1 "*****"
    echo_pos $(( $clock_y + 3 )) $1 "*   *"
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}

print_9 () {
    echo_pos $clock_y $1            "*****"
    echo_pos $(( $clock_y + 1 )) $1 "*   *"
    echo_pos $(( $clock_y + 2 )) $1 "*****"
    echo_pos $(( $clock_y + 3 )) $1 "    *"
    echo_pos $(( $clock_y + 4 )) $1 "*****"
}

print_divider () {
    echo_pos $clock_y $1            "     "
    echo_pos $(( $clock_y + 1 )) $1 "  *  "
    echo_pos $(( $clock_y + 2 )) $1 "     "
    echo_pos $(( $clock_y + 3 )) $1 "  *  "
    echo_pos $(( $clock_y + 4 )) $1 "     "
}

# $1 - X offset, $2 - number
print_number() {
    local number=$2
    for (( i=0; i<${#number}; i++ )); do
        local digit=${number:$i:1}
        case "$digit" in
          0)
            print_0 $(( $1 + ( $i * 6 ) ))
            ;;
          1)
            print_1 $(( $1 + ( $i * 6 ) ))
            ;;
          2)
            print_2 $(( $1 + ( $i * 6 ) ))
            ;;
          3)
            print_3 $(( $1 + ( $i * 6 ) ))
            ;;
          4)
            print_4 $(( $1 + ( $i * 6 ) ))
            ;;
          5)
            print_5 $(( $1 + ( $i * 6 ) ))
            ;;
          6)
            print_6 $(( $1 + ( $i * 6 ) ))
            ;;
          7)
            print_7 $(( $1 + ( $i * 6 ) ))
            ;;
          8)
            print_8 $(( $1 + ( $i * 6 ) ))
            ;;
          9)
            print_9 $(( $1 + ( $i * 6 ) ))
            ;;
        esac
    done
}

old_hours=''
old_minutes=''
old_seconds=''
show_clock () {
    local hours=$1
    local minutes=$2
    local seconds=$3
    if [ "$is_big" = true ] ; then
      if [ "$old_hours" != "$hours" ] ; then 
        print_number $clock_x $hours
        old_hours=$hours
      fi
      if [ "$old_minutes" != "$minutes" ] ; then 
        print_number $(( $clock_x+18 )) $minutes
        old_minutes=$minutes
      fi
      if [ "$old_seconds" != "$seconds" ] ; then 
        print_number $(( $clock_x+36 )) $seconds
        old_seconds=$seconds
      fi
    else
      echo -ne "$hours:$minutes:$seconds\r"   
    fi
}

start_date=$(date +%s)
end_date=$(date --date="+$seconds seconds" +%s)

tput civis

if [ "$is_big" = true ] ; then
  clear
  print_divider $(( $clock_x+12 ))
  print_divider $(( $clock_x+30 ))
else 
  echo
fi

while ! [ $(( $(date +%s) - $start_date )) -ge $seconds ]; do
    if [ "$is_stopwatch" = true ] ; then
        show_clock "$(date -u --date @$(( $(date +%s) - $start_date )) +%H)" "$(date -u --date @$(( $(date +%s) - $start_date )) +%M)" "$(date -u --date @$(( $(date +%s) - $start_date )) +%S)"
    else
        show_clock "$(date -u --date @$(( $end_date - $(date +%s) )) +%H)" "$(date -u --date @$(( $end_date - $(date +%s) )) +%M)" "$(date -u --date @$(( $end_date - $(date +%s) )) +%S)"
    fi
done

echo -e "\n"
tput cnorm